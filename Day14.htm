<html>
<head>
<meta charset="utf-8">
<title>Advent of code 2019</title>
<script>
let test1 = // 31 ORE para 1 FUEL
[
	'10 ORE => 10 A',
	'1 ORE => 1 B',
	'7 A, 1 B => 1 C',
	'7 A, 1 C => 1 D',
	'7 A, 1 D => 1 E',
	'7 A, 1 E => 1 FUEL'
];
let test2 = // 165 ORE para 1 FUEL
[
	'9 ORE => 2 A',
	'8 ORE => 3 B',
	'7 ORE => 5 C',
	'3 A, 4 B => 1 AB',
	'5 B, 7 C => 1 BC',
	'4 C, 1 A => 1 CA',
	'2 AB, 3 BC, 4 CA => 1 FUEL'
];
let test3 = // 13312 ORE para 1 FUEL, 82892753 FUEL a partir de 1000000000000 ORE
[
	'157 ORE => 5 NZVS',
	'165 ORE => 6 DCFZ',
	'44 XJWVT, 5 KHKGT, 1 QDVJ, 29 NZVS, 9 GPVTF, 48 HKGWZ => 1 FUEL',
	'12 HKGWZ, 1 GPVTF, 8 PSHF => 9 QDVJ',
	'179 ORE => 7 PSHF',
	'177 ORE => 5 HKGWZ',
	'7 DCFZ, 7 PSHF => 2 XJWVT',
	'165 ORE => 2 GPVTF',
	'3 DCFZ, 7 NZVS, 5 HKGWZ, 10 PSHF => 8 KHKGT'
];
let test4 = // 180697 ORE para 1 FUEL, 5586022 FUEL a partir de 1000000000000 ORE
[
	'2 VPVL, 7 FWMGM, 2 CXFTF, 11 MNCFX => 1 STKFG',
	'17 NVRVD, 3 JNWZP => 8 VPVL',
	'53 STKFG, 6 MNCFX, 46 VJHF, 81 HVMC, 68 CXFTF, 25 GNMV => 1 FUEL',
	'22 VJHF, 37 MNCFX => 5 FWMGM',
	'139 ORE => 4 NVRVD',
	'144 ORE => 7 JNWZP',
	'5 MNCFX, 7 RFSQX, 2 FWMGM, 2 VPVL, 19 CXFTF => 3 HVMC',
	'5 VJHF, 7 MNCFX, 9 VPVL, 37 CXFTF => 6 GNMV',
	'145 ORE => 6 MNCFX',
	'1 NVRVD => 8 CXFTF',
	'1 VJHF, 6 MNCFX => 4 RFSQX',
	'176 ORE => 6 VJHF'
];
let test5 = // 2210736 ORE para 1 FUEL, 460664 FUEL a partir de 1000000000000 ORE
[
	'171 ORE => 8 CNZTR',
	'7 ZLQW, 3 BMBT, 9 XCVML, 26 XMNCP, 1 WPTQ, 2 MZWV, 1 RJRHP => 4 PLWSL',
	'114 ORE => 4 BHXH',
	'14 VRPVC => 6 BMBT',
	'6 BHXH, 18 KTJDG, 12 WPTQ, 7 PLWSL, 31 FHTLT, 37 ZDVW => 1 FUEL',
	'6 WPTQ, 2 BMBT, 8 ZLQW, 18 KTJDG, 1 XMNCP, 6 MZWV, 1 RJRHP => 6 FHTLT',
	'15 XDBXC, 2 LTCX, 1 VRPVC => 6 ZLQW',
	'13 WPTQ, 10 LTCX, 3 RJRHP, 14 XMNCP, 2 MZWV, 1 ZLQW => 1 ZDVW',
	'5 BMBT => 4 WPTQ',
	'189 ORE => 9 KTJDG',
	'1 MZWV, 17 XDBXC, 3 XCVML => 2 XMNCP',
	'12 VRPVC, 27 CNZTR => 2 XDBXC',
	'15 KTJDG, 12 BHXH => 5 XCVML',
	'3 BHXH, 2 VRPVC => 7 MZWV',
	'121 ORE => 7 VRPVC',
	'7 XCVML => 6 RJRHP',
	'5 BHXH, 4 VRPVC => 5 LTCX'
];
let input = // respuesta correcta 399063 ORE para 1 FUEL, 4215654 FUEL a partir de 1000000000000 ORE
[
	'180 ORE => 9 DQFL',
	'3 HGCR, 9 TKRT => 8 ZBLC',
	'1 MZQLG, 12 RPLCK, 8 PDTP => 8 VCFX',
	'3 ZBLC, 19 VFZX => 1 SJQL',
	'1 CRPGK => 4 TPRT',
	'7 HGCR, 4 TGCW, 1 VFZX => 9 JBPHS',
	'8 GJHX => 4 NSDBV',
	'1 VFTG => 2 QNWD',
	'1 WDKW, 2 DWRH, 6 VNMV, 2 HFHL, 55 GJHX, 4 NSDBV, 15 KLJMS, 17 KZDJ => 1 FUEL',
	'2 JHSJ, 15 JNWJ, 1 ZMFXQ => 4 GVRK',
	'1 PJFBD => 3 MZQLG',
	'1 SJQL, 11 LPVWN => 9 DLZS',
	'3 PRMJ, 2 XNWV => 6 JHSJ',
	'4 SJQL => 8 PJFBD',
	'14 QNWD => 6 STHQ',
	'5 CNLFV, 2 VFTG => 9 XNWV',
	'17 LWNKB, 6 KBWF, 3 PLSCB => 8 KZDJ',
	'6 LHWZQ, 5 LWNKB => 3 ZDWX',
	'5 RPLCK, 2 LPVWN => 8 ZMFXQ',
	'1 QNWD, 2 TKRT => 3 CRPGK',
	'1 JBPHS, 1 XNWV => 6 TLRST',
	'21 ZDWX, 3 FZDP, 4 CRPGK => 6 PDTP',
	'1 JCVP => 1 WXDVT',
	'2 CRPGK => 9 FGVL',
	'4 DQFL, 2 VNMV => 1 HGCR',
	'2 GVRK, 2 VCFX, 3 PJFBD, 1 PLSCB, 23 FZDP, 22 PCSM, 1 JLVQ => 6 HFHL',
	'1 CRPGK, 5 PJFBD, 4 XTCP => 8 PLSCB',
	'1 HTZW, 17 FGVL => 3 LHWZQ',
	'2 KBWF => 4 DQKLC',
	'2 LHWZQ => 2 PRMJ',
	'2 DLZS, 2 VCFX, 15 PDTP, 14 ZDWX, 35 NBZC, 20 JVMF, 1 BGWMS => 3 DWRH',
	'2 TKVCX, 6 RPLCK, 2 HTZW => 4 XTCP',
	'8 CNLFV, 1 NRSD, 1 VFTG => 9 VFZX',
	'1 TLRST => 4 WDKW',
	'9 VFCZG => 7 GJHX',
	'4 FZDP => 8 JLVQ',
	'2 ZMFXQ, 2 STHQ => 6 QDZB',
	'2 SJQL, 8 ZDWX, 6 LPRL, 6 WXDVT, 1 TPRT, 1 JNWJ => 8 KLJMS',
	'6 JBPHS, 2 ZBLC => 6 HTZW',
	'1 PDTP, 2 LHWZQ => 8 JNWJ',
	'8 ZBLC => 7 TKVCX',
	'2 WDKW, 31 QDZB => 4 PCSM',
	'15 GJHX, 5 TKVCX => 7 FZDP',
	'15 SJQL, 3 PRMJ => 4 JCVP',
	'31 CNLFV => 1 TGCW',
	'1 TLRST, 2 WDKW => 9 KBWF',
	'102 ORE => 7 VNMV',
	'103 ORE => 5 CNLFV',
	'163 ORE => 2 VFTG',
	'5 NRSD, 1 STHQ => 3 VFCZG',
	'16 LPVWN, 13 KBWF => 2 BGWMS',
	'5 BGWMS, 11 SJQL, 9 FZDP => 6 NBZC',
	'175 ORE => 7 NRSD',
	'5 HTZW => 4 LPVWN',
	'4 PRMJ => 7 JVMF',
	'6 PCSM, 8 DQKLC => 7 LPRL',
	'2 CNLFV => 7 TKRT',
	'3 FZDP => 3 LWNKB',
	'1 HTZW => 4 RPLCK'
];

function input2reactions(input)
{
	// crear la estructura reactions:
	// {
	//     TARGET1:
	//     {
	//         n: TARGET1_AMOUNT,
	//         s:
	//         {
	//             SRC1: SRC1_AMOUNT,
	//             SRC2: SRC2_AMOUNT, ...
	//         }
	//     }, ...
	// }
	let reactions = {};
	for(let row of input)
	{
		let sides = row.split('=>');
		let sources = sides[0].trim().split(',');
		let sourcesObj = {};
		for(let source of sources)
		{
			let tmp = source.trim().split(' ');
			let sourceName = tmp[1];
			let sourceAmount = tmp[0];
			sourcesObj[sourceName] = parseInt(sourceAmount);
		}
		let target = sides[1].trim().split(' ');
		let targetName = target[1];
		let targetAmount = target[0];
		reactions[targetName] = {n: parseInt(targetAmount), s: sourcesObj};
	}
	return reactions;
}

function getTimes(requested, number)
{
	if(number >= requested)
		return 1;
	let times = Math.floor(requested / number);
	if(requested % number)
		times++;
	return times;
}

function getComponents(data, reactions)
{
	let result = {};
	let leftover = {};
	// copiar materiales sobrantes originales
	let leftoverKeys = Object.keys(data.leftover);
	for(let lk of leftoverKeys)
		if(data.leftover[lk] > 0)
			leftover[lk] = data.leftover[lk];
	// iterar por todos los materiales originales
	let dataKeys = Object.keys(data.materials);
	for(let dk of dataKeys)
	{
		let requested = data.materials[dk];
		if(requested < 1)
			continue;
		let reac = reactions[dk];
		if(reac === undefined) // añadir elemento como materia prima si no hay receta definida
		{
			if(result[dk] === undefined)
				result[dk] = 0;
			result[dk] += requested;
			continue;
		}
		let number = reac.n;
		let components = reac.s;
		let times = getTimes(requested, number); // calcular cuántas veces debemos requerir el elemento
		let leftoverAmount = (number * times) - requested; // calcular la cantidad de elemento sobrante que se está produciendo
		if(leftover[dk] === undefined)
			leftover[dk] = 0;
		leftover[dk] += leftoverAmount;
		// iterar por todos los componenetes del elemento
		let compKeys = Object.keys(components);
		for(let ck of compKeys)
		{
			let componentAmount = components[ck] * times; // calcular la cantidad de componenete a añadir
			if(result[ck] === undefined)
				result[ck] = 0;
			result[ck] += componentAmount;
		}
	}
	// iterar por todos los materiales del resultado para restar los sobrantes
	let resultKeys = Object.keys(result);
	for(let rk of resultKeys)
	{
		if(leftover[rk] !== undefined && leftover[rk] > 0)
		{
			if(leftover[rk] > result[rk])
			{
				leftover[rk] -= result[rk];
				result[rk] = 0;
			}
			else
			{
				result[rk] -= leftover[rk];
				leftover[rk] = 0;
			}
		}
	}
	// copiar materiales sobrantes nuevos si son mayores que 0
	let newLeftover = {};
	leftoverKeys = Object.keys(leftover);
	for(let lk of leftoverKeys)
		if(leftover[lk] > 0)
			newLeftover[lk] = leftover[lk];
	// copiar materiales requeridos nuevos si son mayores que 0
	let newMaterials = {};
	materialKeys = Object.keys(result);
	for(let mk of materialKeys)
		if(result[mk] > 0)
			newMaterials[mk] = result[mk];
	return {'materials': newMaterials, 'leftover': newLeftover};
}

function getOre(reactions, requestedFuel = 1)
{
	let data =
	{
		'materials': {'FUEL': requestedFuel},
		'leftover': {}
	};
	let TIMEOUT = 10000;
	while(1)
	{
		if(TIMEOUT-- == 0)
			return -1;
		let keys = Object.keys(data.materials);
		if(keys.length == 1 && keys[0] == 'ORE')
			break;
		data = getComponents(data, reactions);
	}
	return data.materials['ORE'];
}

function getFuel(reactions, ore)
{
	if(getOre(reactions, 1) > ore) // devolver 0 si no se puede fabricar ni 1 FUEL
		return 0;
	
	let start = 0; // inicio del rando de búsqueda
	let end = 1; // fin del rango de búsqueda
	let TIMEOUT = 10000;
	// calcular el rango de búsqueda inicial
	while(1)
	{
		if(TIMEOUT-- == 0)
			return -1;
		let cost = getOre(reactions, end);
		if(cost > ore)
			break;
		start = end;
		end *= 2;
	}
	TIMEOUT = 10000;
	// probar con el punto medio del rango hasta encontrar el valor correcto
	while(1)
	{
		if(TIMEOUT-- == 0)
			return -1;
		let midpoint = Math.floor((start + end) / 2);
		let cost = getOre(reactions, midpoint);
		if(end - start < 4)
		{
			if(cost > ore)
			{
				if(getOre(reactions, midpoint - 1) <= ore)
					return midpoint - 1;
			}
			else
			{
				if(getOre(reactions, midpoint + 1) > ore)
					return midpoint;
			}
		}
		if(cost > ore)
			end = midpoint;
		else
			start = midpoint;
	}
	return -1;
}

function calc()
{
	document.getElementById('test1').textContent = 'Test 1 (31): ' + getOre(input2reactions(test1));
	document.getElementById('test2').textContent = 'Test 2 (165): ' + getOre(input2reactions(test2));
	document.getElementById('test3').textContent = 'Test 3 (13312): ' + getOre(input2reactions(test3));
	document.getElementById('test4').textContent = 'Test 4 (180697): ' + getOre(input2reactions(test4));
	document.getElementById('test5').textContent = 'Test 5 (2210736): ' + getOre(input2reactions(test5));
	document.getElementById('resultado1').textContent = 'Cantidad mínima de ORE para producir 1 FUEL: ' + getOre(input2reactions(input));
	
	document.getElementById('testb1').textContent = 'Test B 1 (34482758620): ' + getFuel(input2reactions(test1), 1000000000000);
	document.getElementById('testb2').textContent = 'Test B 2 (6323777403): ' + getFuel(input2reactions(test2), 1000000000000);
	document.getElementById('testb3').textContent = 'Test B 3 (82892753): ' + getFuel(input2reactions(test3), 1000000000000);
	document.getElementById('testb4').textContent = 'Test B 4 (5586022): ' + getFuel(input2reactions(test4), 1000000000000);
	document.getElementById('testb5').textContent = 'Test B 5 (460664): ' + getFuel(input2reactions(test5), 1000000000000);
	document.getElementById('resultado2').textContent = 'Cantidad de FUEL obtenible con 1000000000000 ORE: ' + getFuel(input2reactions(input), 1000000000000);
}
</script>
</head>
<body>
<h2>Día 14: química contaminante</h2>
<input type="button" value="Iniciar producción" onclick="calc()" /><br />
<span id="test1"></span><br />
<span id="test2"></span><br />
<span id="test3"></span><br />
<span id="test4"></span><br />
<span id="test5"></span><br />
<span id="resultado1"></span><br />
<span id="testb1"></span><br />
<span id="testb2"></span><br />
<span id="testb3"></span><br />
<span id="testb4"></span><br />
<span id="testb5"></span><br />
<span id="resultado2"></span>
</body>
</html>